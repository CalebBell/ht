# DO NOT EDIT - AUTOMATICALLY GENERATED BY tests/make_test_stubs.py!
from typing import List
from typing import (
    List,
    Optional,
    Union,
)


def Nu_cylinder_Churchill_Bernstein(Re: float, Pr: float) -> float: ...


def Nu_cylinder_Fand(Re: float, Pr: float) -> float: ...


def Nu_cylinder_McAdams(Re: float, Pr: float) -> float: ...


def Nu_cylinder_Perkins_Leppert_1962(
    Re: float,
    Pr: float,
    mu: Optional[float] = ...,
    muw: Optional[float] = ...
) -> float: ...


def Nu_cylinder_Perkins_Leppert_1964(
    Re: float,
    Pr: float,
    mu: Optional[float] = ...,
    muw: Optional[float] = ...
) -> float: ...


def Nu_cylinder_Sanitjai_Goldstein(Re: float, Pr: float) -> float: ...


def Nu_cylinder_Whitaker(Re: float, Pr: float, mu: Optional[float] = ..., muw: Optional[float] = ...) -> float: ...


def Nu_cylinder_Zukauskas(Re: float, Pr: float, Prw: Optional[float] = ...) -> float: ...


def Nu_external_cylinder(
    Re: float,
    Pr: float,
    Prw: Optional[float] = ...,
    mu: Optional[float] = ...,
    muw: Optional[float] = ...,
    Method: Optional[str] = ...
) -> float: ...


def Nu_external_cylinder_methods(
    Re: float,
    Pr: float,
    Prw: Optional[float] = ...,
    mu: Optional[float] = ...,
    muw: Optional[float] = ...,
    check_ranges: bool = ...
) -> List[str]: ...


def Nu_external_horizontal_plate(
    Re: float,
    Pr: float,
    L: None = ...,
    x: None = ...,
    Method: Optional[str] = ...,
    laminar_method: str = ...,
    turbulent_method: str = ...,
    Re_transition: float = ...
) -> float: ...


def Nu_external_horizontal_plate_methods(
    Re: float,
    Pr: float,
    L: Optional[float] = ...,
    x: Optional[float] = ...,
    check_ranges: bool = ...
) -> List[str]: ...


def Nu_horizontal_plate_laminar_Baehr(Re: float, Pr: float) -> float: ...


def Nu_horizontal_plate_laminar_Churchill_Ozoe(Re: float, Pr: float) -> float: ...


def Nu_horizontal_plate_turbulent_Kreith(Re: float, Pr: float) -> float: ...


def Nu_horizontal_plate_turbulent_Schlichting(Re: float, Pr: float) -> float: ...

__all__: List[str]