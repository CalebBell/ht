# DO NOT EDIT - AUTOMATICALLY GENERATED BY tests/make_test_stubs.py!
from typing import List
from typing import (
    List,
    Optional,
    Union,
)


def Bier(P: float, Pc: float, Te: Optional[float] = ..., q: Optional[float] = ...) -> float: ...


def Cooper(
    P: float,
    Pc: float,
    MW: float,
    Te: Optional[float] = ...,
    q: Optional[float] = ...,
    Rp: float = ...
) -> float: ...


def Forster_Zuber(
    rhol: float,
    rhog: float,
    mul: float,
    kl: float,
    Cpl: float,
    Hvap: float,
    sigma: float,
    dPsat: float,
    Te: Optional[float] = ...,
    q: Optional[float] = ...
) -> float: ...


def Gorenflo(
    P: float,
    Pc: float,
    q: Optional[float] = ...,
    Te: Optional[float] = ...,
    CASRN: Optional[str] = ...,
    h0: Optional[int] = ...,
    Ra: float = ...
) -> float: ...


def HEDH_Montinsky(P: float, Pc: float) -> float: ...


def HEDH_Taborek(P: float, Pc: float, Te: Optional[float] = ..., q: Optional[float] = ...) -> float: ...


def McNelly(
    rhol: float,
    rhog: float,
    kl: float,
    Cpl: float,
    Hvap: float,
    sigma: float,
    P: int,
    Te: Optional[float] = ...,
    q: Optional[float] = ...
) -> float: ...


def Montinsky(
    P: float,
    Pc: float,
    Te: Optional[float] = ...,
    q: Optional[float] = ...
) -> float: ...


def Rohsenow(
    rhol: float,
    rhog: float,
    mul: float,
    kl: float,
    Cpl: float,
    Hvap: float,
    sigma: float,
    Te: Optional[float] = ...,
    q: Optional[float] = ...,
    Csf: float = ...,
    n: float = ...
) -> float: ...


def Serth_HEDH(D: float, sigma: float, Hvap: float, rhol: int, rhog: float) -> float: ...


def Stephan_Abdelsalam(
    rhol: int,
    rhog: float,
    mul: float,
    kl: float,
    Cpl: float,
    Hvap: float,
    sigma: float,
    Tsat: float,
    Te: Optional[float] = ...,
    q: Optional[float] = ...,
    kw: int = ...,
    rhow: float = ...,
    Cpw: int = ...,
    angle: Optional[float] = ...,
    correlation: str = ...
) -> float: ...


def Zuber(sigma: float, Hvap: float, rhol: int, rhog: float, K: float = ...) -> float: ...


def h_nucleic(
    Te: Optional[float] = ...,
    q: Optional[float] = ...,
    Tsat: Optional[float] = ...,
    P: Optional[float] = ...,
    dPsat: Optional[float] = ...,
    Cpl: Optional[float] = ...,
    kl: Optional[float] = ...,
    mul: Optional[float] = ...,
    rhol: Optional[float] = ...,
    sigma: Optional[float] = ...,
    Hvap: Optional[float] = ...,
    rhog: Optional[float] = ...,
    MW: Optional[float] = ...,
    Pc: Optional[float] = ...,
    Csf: float = ...,
    n: float = ...,
    kw: int = ...,
    rhow: float = ...,
    Cpw: int = ...,
    angle: float = ...,
    Rp: float = ...,
    Ra: float = ...,
    h0: None = ...,
    CAS: Optional[str] = ...,
    Method: Optional[str] = ...
) -> float: ...


def h_nucleic_methods(
    Te: Optional[float] = ...,
    Tsat: Optional[float] = ...,
    P: Optional[float] = ...,
    dPsat: Optional[float] = ...,
    Cpl: Optional[float] = ...,
    kl: Optional[float] = ...,
    mul: Optional[float] = ...,
    rhol: Optional[float] = ...,
    sigma: Optional[float] = ...,
    Hvap: Optional[float] = ...,
    rhog: Optional[float] = ...,
    MW: Optional[float] = ...,
    Pc: Optional[float] = ...,
    CAS: Optional[str] = ...,
    check_ranges: bool = ...
) -> List[str]: ...


def qmax_boiling(
    rhol: Optional[int] = ...,
    rhog: Optional[float] = ...,
    sigma: Optional[float] = ...,
    Hvap: Optional[float] = ...,
    D: Optional[float] = ...,
    P: Optional[float] = ...,
    Pc: Optional[float] = ...,
    Method: Optional[str] = ...,
    AvailableMethods: bool = ...
) -> Union[List[str], float]: ...


def qmax_boiling_methods(
    rhol: Optional[int] = ...,
    rhog: Optional[float] = ...,
    sigma: Optional[float] = ...,
    Hvap: Optional[float] = ...,
    D: Optional[float] = ...,
    P: Optional[float] = ...,
    Pc: Optional[float] = ...,
    check_ranges: bool = ...
) -> List[str]: ...

__all__: List[str]